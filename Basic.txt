                                                       Terraform
==================================================================================================================================

Terraform is an open-source Infrastructure as Code (IaC) tool developed by HashiCorp. It allows users to define and provision infrastructure resources in a consistent and automated manner using a high-level configuration language called **HashiCorp Configuration Language (HCL)** or JSON.

With Terraform, you can manage a wide range of resources, such as virtual machines, networking components, storage, and services, across multiple cloud providers (e.g., AWS, Azure, Google Cloud) or on-premises infrastructure. 
Terraform uses a declarative approach, meaning you define the desired state of your infrastructure, and Terraform handles creating, updating, or deleting resources to achieve that state.

Key features of Terraform:
- **Infrastructure as Code (IaC):** Infrastructure is managed using code, enabling version control, reusability, and collaboration.
- **State Management:** Terraform keeps track of your resources in a state file, which it uses to compare your infrastructure's current state with the desired state and make changes accordingly.
- **Multi-Provider Support:** Supports a variety of cloud providers and services through "providers."
- **Modularity:** Allows users to define reusable modules for consistent infrastructure components.



----------------------------------------------------------------------------------------------------------------------------------
Terraform Adv
----------------
- Terraform code is simple to understanding
- can be used with multple vendors.(code will changed)
- can perform dry-run easily.
- config can be split in to multiple files.
- Importing of manual resources
- Terraform is fast
Terraform Dis
------------------
- 3rd part, new services might not be availible
- BUGS
- Lack of support.


- terraform.tfstate (we deploy the terraform file to create infrastructure to do changes the infrastructure to update the teraform.tfstate files )

terraform files

-----------------
- main.tf and other tf files, eg:vcp.tf,sec.tf
- varibles.tf
- terraform.tfvars


-AWS Access Key And Secret Key
- xxxxxxxxxxxx
- xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx


-----github--------------------------
- https://github.com/ramesh1918s/Terraform/tree/main/terraformsingleinstance

- cmd copy the github url then past it
- ls 
- cd terraform files
- terraform init
- terraform plan 

--------------------------------sceenshot cmd---------------------------------------------------------------------------


PS C:\Users\91915\Terraform\terraformsingleinstance\terraformsingleinstance> terraform init
Initializing the backend...
PS C:\Users\91915\Terraform\terraformsingleinstance\terraformsingleinstance> terraform init

Apply cancelled.



------------------------------------------------------------------------------------------------------------------------------------

-- -----------
   1 ls
   2 cd Terraform
   3 ls
   4 code .
   5 tr
   6 terraform version
   7 ls
   8 cd terraformsingleinstance
   9 ls
  10 code .
  11 terraform init
  12 ls
  13 terraform plan
  14 terraform plan
  15 terraform apply
  16 terraform plan
  17 terraform plan --var-file fterraform.tfvars
  18 ls
  19 cd  terraformsingleinstance
  20 terraform init
  21 terraform init
  22 terraform apply
  23 terraform plan
  24 terraform plan --var-file fterraform.tfvars
  25 terraform plan --var-file terraform.tfvars
  26 terraform apply --var-file terraform.tfvars
  27 terraform apply --var-file terraform.tfvars --auto-approve
  28 terraform apply --var-file terraform.tfvars --auto-approve
  29 terraform apply --var-file terraform.tfvars
  30 terraform destroy --var-file terraform.tfvars

terraform aws provide 
  ---------------------------------------------------------------------------------
  terraform files
  ------------------------
- .tf --files
- .tfvars --files
- .state   --files

- dev.tfvars
- prov.ftvars

--------------------------------------work space ------------------------------------------------------------------

- main.tf files okkate terraform.tfstate file untundi
- some changes cheyali anukunte appudu workspace use cheyali 
- workspace name dev and prov 
- dev changes into the terraform.tfstate are update
- prov changes into the terraform.tfstate are update 
- defferent state file are create 
- mainaly used the one work defferent workteams
- eg (dev,prov)  


----------------------------------------functions ----------------------------------------------------------------------

- terraform console 
- >  length(["a" , "b"])
2
- multipully reasources create a by terraform 
- create 3 subnets by terraform functions
- az => us-east-1a , us-east-1b , us-east-1c
- cidrs => 10.1.1.0/24 , 10.1.2.0/24 , 10.1.3.0/24 , 10.1.4.0/24 , 10.1.5.0/24 , 10.1.6.0/24


- varibles.tf changes add 
- variable"az" {

}  (in this below the script)
- variable "cidrs" {
  description = "CIDRS For Subnets"
  default = ["10.1.1.0/24", "10.1.2.0/24","10.1.3.0/24", "10.1.5.0/24"]
}


------------------------------------------------------------

https://developer.hashicorp.com/terraform/language/functions/element

- element Function
element retrieves a single element from a list.

element(list, index)

-eg 
> element(["a", "b", "c"], 1)
b

------------------------------------------
Length 

length determines the length of a given list, map, or string.

If given a list or map, the result is the number of elements in that collection. If given a string, the result is the number of characters in the string.

Examples
> length([])
0
> length(["a", "b"])
2
> length({"a" = "b"})
1
> length("hello")
5


--------------------------------------------------------------------------------
create 

comment-out the line used this 
- ctrl + /

- aws_route_table_association commentout

- terraform plan -- var-file terraform.tfvars (powershell )
run the commend

-------------------------------------------------------------------------------
functions element 

- add change script main.tf 

resource "aws_subnet" "subnet1-public" {
  count = 3
  vpc_id = "${aws_vpc.default.id}"
  cidr_block = "${var.public_subnet1_cidr}"
  availability_zone = "${element(var.azs, count.index)}"
------------------------------------------------------------------

- then comment  terraform plan -- var-file terraform.tfvars (powershell )


  -----------------------------------------------------------------------
terraform slap syntax

 subnet_id = "${aws_subnet.private-subnets.*.id}"





both changes 


------------create a 6 subnets ------------------------------------------------------------

- 6 publicsubnets (main.tf)

resource "aws_subnet" "public-subnets" {
  count = "${length(var.public-cidrs)}"
  vpc_id = "${aws_vpc.default.id}"
  cidr_block = "${element(var.public-cidrs, count.index)}"
  availability_zone = "${element(var.azs, count.index)}"

  tags = {
      Name = "${aws_vpc.default.tags.Name}-Public-Subnet-${count.index + 1}"
  }
}


-------------------------------------------------------------------------------------------


- 6 privatesubnets (main.tf)



resource "aws_subnet" "private-subnets" {
  count = "${length(var.private-cidrs)}"
  vpc_id = "${aws_vpc.default.id}"
  cidr_block = "${element(var.private-cidrs, count.index)}"
  availability_zone = "${element(var.azs, count.index)}"

  tags = {
      Name = "${aws_vpc.default.tags.Name}-Private-Subnet-${count.index + 1}"
  }
}

--------------------(variables.tfvars)----------------------------------------------------------------------

variable "azs" {
  description = "Run the EC2 Instances in these Availability Zones"
  default = ["us-east-1a", "us-east-1b", "us-east-1c"]
}
variable "public-cidrs" {
  description = "CIDRS For Subnets"
  default = ["10.1.1.0/24", "10.1.2.0/24","10.1.3.0/24", "10.1.4.0/24", "10.1.5.0/24", "10.1.6.0/24"]
}

variable "private-cidrs" {
  description = "CIDRS For Subnets"
  default = ["10.1.10.0/24", "10.1.20.0/24","10.1.30.0/24", "10.1.40.0/24", "10.1.50.0/24", "10.1.60.0/24"]
}

-----------------------------------(terraform.tfstates)-----------------------------------------------------------------------------

aws_access_key = "xxxxxxxxxxxxxxxx"
aws_secret_key = "xxxxxxxxxxxxxxxxxxxxxxxxxx"
aws_region = "us-east-1"
vpc_cidr = "10.1.0.0/16"
public_subnet1_cidr = "10.1.1.0/24"
public_subnet2_cidr = "10.1.2.0/24"
public_subnet3_cidr = "10.1.3.0/24"
private_subnet_cidr = "10.1.20.0/24"
vpc_name = "terraform-aws-VPC"
IGW_name = "terraform-aws-igw"
public_subnet1_name = "Terraform_Public_Subnet1-testing"
public_subnet2_name = "Terraform_Public_Subnet2-testing"
public_subnet3_name = "Terraform_Public_Subnet3-testing"
private_subnet_name = "Terraform_Private_Subnet-testing"
Main_Routing_Table = "Terraform_Main_table-testing"
Private_Routing_Table = "Terraform_Private_table-testing"
key_name = "Prod_Key"
environment = "dev"


------------------------------------------------------------------------------------------------------------------------------

=====================================================================================================
- create two routes 
- create two route aws_route_table_association


resource "aws_route_table" "terraform-public" {
  vpc_id = "${aws_vpc.default.id}"

  route {
      cidr_block = "0.0.0.0/0"
      gateway_id = "${aws_internet_gateway.default.id}"
  }

  tags = {
      Name = "${var.Main_Routing_Table}"
  }
}

resource "aws_route_table" "terraform-private" {
  vpc_id = "${aws_vpc.default.id}"

  route {
      cidr_block = "0.0.0.0/0"
      gateway_id = "${aws_internet_gateway.default.id}"
  }

  tags = {
      Name = "${var.Private_Routing_Table}"
  }
}

resource "aws_route_table_association" "terraform-public" {
  count = "${length(var.public-cidrs)}"
  subnet_id = "${element(aws_subnet.public-subnets.*.id, count.index)}"
  route_table_id = "${aws_route_table.terraform-public.id}"
}

resource "aws_route_table_association" "terraform-private" {
  count = "${length(var.private-cidrs)}"
  subnet_id = "${element(aws_subnet.private-subnets.*.id, count.index)}"
  route_table_id = "${aws_route_table.terraform-private.id}"
}

-------------------------------------------------------------------------------------------------------------------------------------------------
- PS C:\Users\91915\Terraform\terraformsingleinstance\terraformsingleinstance> terraform apply --var-file terraform.tfvars

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create


╵--------------------------------------------------------------------------------------------------

- create aws nat-gateway


- create aws elastic ip 

- resource "aws_eip" "lb" {
  instance = aws_instance.web.id
  domain   = "vpc"
}


subnet_id     = aws_subnet.example.id



---------------------------------------------

create eip-nat.tf

resource "aws_eip" "eipnatgw" {
  vpc       = true
 
 }
 resource "aws_nat_gateway" "natgw" {
   allocation_id = "${aws_eip.eipnatgw.id}"
 subnet_id     = "${aws_subnet.public-subnets.0.id}"
 
 }

 ---------------------------------------------

 chnages to add main.ft 

 resource "aws_route_table" "terraform-private" {
  vpc_id = "${aws_vpc.default.id}"

  route {
      cidr_block = "0.0.0.0/0"
      gateway_id = "${aws_nat_gateway.natgw.id}"
  }
 }
  ---------------------------create EC2 -------------------------------------------------------------
  - create ec2 file 
  - ec2.tf
  -


resource "aws_instance" "public-instances" {
    count = 2
    ami = "ami-0e2c8caa4b6378d8c"
    #ami = "ami-0d857ff0f5fc4e03b"
    #ami = "${data.aws_ami.my_ami.id}"
    #availability_zone = "us-east-1a"
    instance_type = "t2.micro"
    key_name = "Prod_Key"
    subnet_id = "${element(aws_subnet.public-subnets.*.id, count.index)}"
    vpc_security_group_ids = ["${aws_security_group.allow_all.id}"]
    associate_public_ip_address = true	
    tags = {
        Name = "PublicServer-${count.index+1}"
    #     Env = "Prod"
    #     Owner = "Sree"
	# CostCenter = "ABCD"
    }
}